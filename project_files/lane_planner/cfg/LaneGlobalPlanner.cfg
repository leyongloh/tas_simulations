#!/usr/bin/env python
PACKAGE = "lane_planner"
NODE_NAME = "lane_global_planner"
PARAMS_NAME = "LaneGlobalPlanner"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Debugging
gen.add("debug",            bool_t, 0, "Set lane_global_planner to debug mode",     True)
gen.add("trigger_left",     bool_t, 0, "Manual lane changing trigger to the left",  False)
gen.add("trigger_right",    bool_t, 0, "Manual lane changing trigger to the right", False)

# Operation mode
gen.add("decision_mode", int_t, 0, "Set lane_global_planners decision mode", 0, 0, 1)

# Parameter
gen.add("lane_width", double_t, 0, "Lane width", 5.0, 0.0, 100.0)

# State Machine Timeouts
gen.add("no_maneuver_timeout",                  double_t,   0, "State machine timeout if maneuver does not change",   3.0, 0.0, 20.0)
gen.add("maneuver_timeout",                     double_t,   0, "State machine timeout if maneuver changed",           5.0, 0.0, 20.0)
gen.add("maneuver_timeout_trigger_update",      bool_t,     0, "Sucessful maneuver timeout triggers another update",  True)

# Interpolation
gen.add("interpolation_steps", int_t, 0, "Steps of interpolation between two points", 10, 0, 100)

interpolation_options = gen.enum([  gen.const("LinearInterpolation",     int_t,  0,   "Linear2D interpolation between trajectory points"),
                                    gen.const("CatmullInterpolation",    int_t,  1,   "Catmull2D interpolation betwen trajectory points"),
                                    gen.const("HermiteInterpolation",    int_t,  2,   "Hermite2D interpolation betwen trajectory points")],
                                    "Methods for interpolation")

gen.add("interpolation_method", int_t, 0, "Interpolation method between two trajectory points", 0, 0, 1, edit_method=interpolation_options)

# Find closest node
find_node_options = gen.enum([  gen.const("LinearSearch",         int_t,  0,   "Linear search for closest node on trajectory"),
                                gen.const("LinearApproxSearch",   int_t,  1,   "Lienar search for closest node on trajectory with approximation method")],
                                "Methods for finding closest node")

gen.add("find_node_method", int_t, 0, "Method for finding closest node on trajectory", 0, 0, 1, edit_method=find_node_options)

exit(gen.generate(PACKAGE, NODE_NAME, PARAMS_NAME))
